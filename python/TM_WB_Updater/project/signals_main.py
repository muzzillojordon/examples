import pandas as pd
from .errors import *


class MainSignals:
    """from signals in current workbook find all calcualted signals. This will be the main Signals with 'FHR_TM' Field that runs the TestManager and signals that are generated by tests manager ie (forcast fixed limt).
    There are 3 types of signals:
    main Signal: calculated signal, the signal test manager runs on and builds all other signals. Middle signal and test Signal need to update Main Signal. IE. 47AI0041
    middle signal: Intermediate=True, may or may not exists for a given FHR_TM instance signal generated by test manager that a test signal ("condition") can be placed on.
    test Signal: Calculated Condition, the final condition that is placed on a middle signal or main signal. IE. Fixed Limit Zscore
    """

    def __init__(self, wb_signals):
        self.main_signals_df = pd.DataFrame()
        self.original_metadata = pd.DataFrame()

        self.get_main_signals(wb_signals)

        # to make sure all metadata expect 'FHR_TM' is unchanged update class uses this
        self.original_metadata = self.main_signals_df.copy(deep=True)

    def get_main_signals(self, wb_signals):
        """function will get all "main signals" from given WorkBookSignals class. Main Signal has type CalculatedSignal
        Args:
            wb_signals (Pandas DataFrame): DataFrame for all signals in workbook
        Raises:
            NoDataFound: If workbook has no main signals (ie. no signals with FHR_TM)
        """
        self.main_signals_df = wb_signals.loc[wb_signals["Type"] == "CalculatedSignal"]
        if self.main_signals_df.empty or not "FHR_TM" in self.main_signals_df.columns:
            raise NoDataFound("No Test Manager Signals Found in Workbook")

        self.main_signals_df = self.main_signals_df[
            ~self.main_signals_df["FHR_TM"].isnull()
        ]
